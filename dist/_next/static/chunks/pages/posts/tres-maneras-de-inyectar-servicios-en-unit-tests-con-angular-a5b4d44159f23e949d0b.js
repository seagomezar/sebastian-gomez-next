_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[44],{DuZM:function(e,a,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/tres-maneras-de-inyectar-servicios-en-unit-tests-con-angular",function(){return n("Ksnq")}])},Ksnq:function(e,a,n){"use strict";n.r(a),n.d(a,"default",(function(){return b}));var t=n("wx14"),r=n("Ff2n"),s=n("q1tI"),o=n.n(s),c=n("7ljp"),i=n("j53b"),u=n("6G3q"),l=n("37hk");o.a.createElement;Object(c.b)(u.a,{category:"Angular",date:"2020-05-05",title:"Tres maneras de inyectar servicios en unit tests con Angular",slug:"tres-maneras-de-inyectar-servicios-en-unit-tests-con-angular",thumbnailImage:"/angular.png",excerpt:"Cuando escribimos tests unitarios para nuestros servicios en Angular tenemos varias opciones para inyectar el servicio en cada uno de nuestros it bloques, en este post exploraremos cuales son algunas las ventajas y desventajas de cada una de las maneras."});var d={};function b(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(t.a)({},d,n,{components:a,mdxType:"MDXLayout"}),Object(c.b)("h1",null,"Tres maneras de inyectar servicios en unit tests con Angular"),Object(c.b)(i.a,{tags:["Angular","Desarrollo Web"],date:"2020-05-05",slug:"tres-maneras-de-inyectar-servicios-en-unit-tests-con-angular",mdxType:"PostHeader"}),Object(c.b)("p",null,'Cuando escribimos tests unitarios para nuestros servicios en Angular tenemos varias opciones para inyectar el servicio en cada uno de nuestros "it" bloques, en este post exploraremos cuales son algunas las ventajas y desventajas de cada una de las maneras.'),Object(c.b)("p",null,"Revisemos un servicio s\xfaper simple que deseamos probar, este servicio solo tendr\xe1 una propiedad y un m\xe9todo para probar."),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"class Observable {\n    import { Injectable } from '@angular/core';\n\n    @Injectable({\n        providedIn: 'root'\n    })\n    export class NamesService {\n\n        private names: string[] = ['Juan', 'Mati'];\n\n        constructor() { }\n\n        public getNames() {\n            return this.names;\n        }\n    }\n}\n")),Object(c.b)("p",null,'Por defecto nuestro archivo de pruebas asociado nos propone inyectar el servicio directamente en cada bloque "it" de esta manera:'),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"    import { TestBed, inject } from '@angular/core/testing'; // We always need this\n    import { NamesService } from './names.service'; // Our service to test\n\n    describe('NamesService', () => {\n        beforeEach(() => {\n            TestBed.configureTestingModule({\n            providers: [NamesService] // Service to test\n            });\n        });\n\n        it('should be created', inject([NamesService], (service: NamesService) => { // Default\n        it('should be something', inject([NamesService], (service: NamesService) => { // Default\n        it('should be .....', inject([NamesService], (service: NamesService) => { // Default\n\n    /*...*/\n")),Object(c.b)("p",null,"Sin embargo. Te dar\xe1s cuenta que esta manera requiere repetir la misma l\xednea todo el tiempo. Una ventaja de este enfoque es que estas empezando con un servicio nuevo y limpio en cada bloque it. Entonces naturalmente podemos valernos de Angular TestBed para evitar repetir esta l\xednea. Algo as\xed:"),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'beforeEach(() => {\n  TestBed.configureTestingModule({\n    providers: [NamesService], // Service to test\n  });\n  // It is another approach to put available the service during the tests.\n  service = TestBed.get(NamesService);\n});\n/** ... */\nit("should be created", () => {\n  // Service is perfectly available\n});\n')),Object(c.b)("p",null,"TestBed.get() es una funci\xf3n que nos permite crear una instancia del servicio que estamos usando. Al crear el servicio dentro del beforeEach estamos garantizando que cada bloque it tenga una versi\xf3n nueva del servicio evitando empezar con un servicio corrupto por test anteriores. Sin embargo podr\xedas encontrarte con situaciones que requieran que una misma instancia del servicio y para eso la primera forma ",Object(c.b)("inlineCode",{parentName:"p"},"inject([NamesService], (service: NamesService) => {")," se queda corta. Para tener exactamente la misma instancia del servicio a trav\xe9s los bloque it tendriamos que usar el segundo enfoque ",Object(c.b)("inlineCode",{parentName:"p"},"service = TestBed.get(NamesService);")," dentro del bloque beforeEach. Veamos un ejemplo de su utilidad con una simple propiedad."),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'beforeAll(() => {\n  service = TestBed.get(NamesService);\n});\n\nit("should be myVar set to 13", () => {\n  service.setMyVar(13);\n  expect(service.myVar).toBe(13);\n});\n\nit("should be myVar still set to 13 and then set to 12", () => {\n  expect(service.myVar).toBe(13);\n  service.setMyVar(12);\n  expect(service.myVar).toBe(12);\n});\n')),Object(c.b)("p",null,"As\xed tu puedes persistir el estado del servicio a trav\xe9s de los diferentes its y podr\xeda sobre todo ser muy \xfatil en pruebas unitarias relacionadas con procesos de CRUD para evitar repetir c\xf3digo y tener la trazabilidad de todo el test."),Object(c.b)("p",null,"As\xed repasando las tres estrategias para inyectar servicios en nuestros test tenemos:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"inject([NamesService], (service: NamesService) => {")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"beforeEach(()=>service = TestBed.get(NamesService);}")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"beforeAll(()=>service = TestBed.get(NamesService);}"))),Object(c.b)("p",null,"Eso es todo, espero que este post te sea de utilidad, Si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gust\xf3 tambi\xe9n puedes compartir usando los links a las redes sociales en la parte de abajo."),Object(c.b)(l.a,{slug:"tres-maneras-de-inyectar-servicios-en-unit-tests-con-angular",mdxType:"Discuss"}))}b.isMDXComponent=!0},j53b:function(e,a,n){"use strict";var t=n("1OyB"),r=n("vuIU"),s=n("Ji7U"),o=n("md7G"),c=n("foSv"),i=n("MX0m"),u=n.n(i),l=n("q1tI"),d=n.n(l),b=(n("YFqc"),d.a.createElement);function p(e){var a=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,t=Object(c.a)(e);if(a){var r=Object(c.a)(this).constructor;n=Reflect.construct(t,arguments,r)}else n=t.apply(this,arguments);return Object(o.a)(this,n)}}var m={CSS:"primary",HTML:"secondary",Javascript:"warning",Firebase:"warning","Google Maps":"darkgreen",Angular:"danger",React:"success","Desarrollo Web":"info","Google Datastudio":"primary","Big Query":"danger",NodeJS:"node",Other:"dark",Typescript:"typescript","Programaci\xf3n Reactiva":"reactive"},v=function(e){Object(s.a)(n,e);var a=p(n);function n(){return Object(t.a)(this,n),a.apply(this,arguments)}return Object(r.a)(n,[{key:"render",value:function(){var e=this.props.name;return b("a",{className:"jsx-187945056 "+("badge badge-"+(m[e]||"dark")||!1)},e,b(u.a,{id:"187945056"},[".badge.jsx-187945056{-webkit-text-decoration:none;text-decoration:none;margin-right:1em;color:white;padding:0.5em 0.5em;margin:0.5em 0;display:inline-block;}",".badge-primary.jsx-187945056{background-color:blue;}",".badge-secondary.jsx-187945056{background-color:green;}",".badge-darkgreen.jsx-187945056{background-color:#3cba54;}",".badge-danger.jsx-187945056{background-color:red;}",".badge-warning.jsx-187945056{background-color:#e5be01;}",".badge-info.jsx-187945056{background-color:gray;}",".badge-dark.jsx-187945056{background-color:black;}",".badge-success.jsx-187945056{background-color:green;}",".badge-node.jsx-187945056{background-color:#11d92f;}",".badge-typescript.jsx-187945056{background-color:#4f8cf6;}",".badge-reactive.jsx-187945056{background-color:#e10c8c;}"]))}}]),n}(d.a.Component),g=d.a.createElement;function j(e){var a=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,t=Object(c.a)(e);if(a){var r=Object(c.a)(this).constructor;n=Reflect.construct(t,arguments,r)}else n=t.apply(this,arguments);return Object(o.a)(this,n)}}var f=function(e){Object(s.a)(n,e);var a=j(n);function n(){return Object(t.a)(this,n),a.apply(this,arguments)}return Object(r.a)(n,[{key:"render",value:function(){var e=this.props,a=e.date,n=e.tags;e.slug;return g("small",{className:"jsx-1750184873 "},g("span",{className:"jsx-1750184873"},g("strong",{className:"jsx-1750184873"},"Fecha: "),new Date(a).toLocaleDateString("es-CO")," -",g("strong",{className:"jsx-1750184873"}," Autor: ")," Sebastian Gomez"),g("span",{className:"jsx-1750184873"}),g("span",{className:"jsx-1750184873"},n.map((function(e,a){return g(v,{name:e,key:a})}))),g(u.a,{id:"1750184873"},["a.jsx-1750184873{color:#9eabb3;-webkit-text-decoration:none;text-decoration:none;}","small.jsx-1750184873{color:#9eabb3;}","span.jsx-1750184873{display:block;}","span.jsx-1750184873:first-child{margin-top:0.2em;}","span.jsx-1750184873:last-child{margin-bottom:1em;}"]))}}]),n}(d.a.Component);a.a=f}},[["DuZM",0,1,2,3,4,5]]]);