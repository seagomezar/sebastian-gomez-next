_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[26],{"0Xln":function(e,a,n){"use strict";n.r(a),n.d(a,"default",(function(){return p}));var r=n("wx14"),s=n("Ff2n"),t=n("q1tI"),o=n.n(t),i=n("7ljp"),c=n("j53b"),u=n("6G3q"),d=n("37hk"),l=(o.a.createElement,{});function p(e){var a=e.components,n=Object(s.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,n,{components:a,mdxType:"MDXLayout"}),Object(i.b)(u.a,{category:"Angular",date:"2020-05-05",title:"Escribiendo Tests para funciones y Propiedades Privadas en Angular",slug:"escribiendo-tests-para-funciones-y-propiedades-privadas-en-angular",thumbnailImage:"https://angular.io/assets/images/logos/angular/angular.svg",excerpt:"Escribir pruebas unitarias debe convertirse en una tarea diaria, no es posible crear una aplicaci\xf3n en Angular de calidad sin realizar un proceso consciente de unit testing. En este post veremos como probar funciones que retornan propiedades privadas en Angular 6 con Karma y Jasmine.",mdxType:"HeadSite"}),Object(i.b)("h1",null,"Escribiendo Tests para funciones y Propiedades Privadas en Angular"),Object(i.b)("p",null,"Escribir pruebas unitarias debe convertirse en una tarea diaria, no es posible crear una aplicaci\xf3n en Angular de calidad sin realizar un proceso consciente de unit testing. En este post veremos como probar funciones que retornan propiedades privadas en Angular 6 con Karma y Jasmine."),Object(i.b)(c.a,{tags:["Angular","Desarrollo Web"],date:"2020-05-05",slug:"escribiendo-tests-para-funciones-y-propiedades-privadas-en-angular",mdxType:"PostHeader"}),Object(i.b)("p",null,"Vamos a suponer que sabes que es Angular y que sabes como crear un servicio en Angular, por tanto habr\xe1s notado que al escribir ",Object(i.b)("inlineCode",{parentName:"p"},"ng generate service <nombre del servicio>")," se crean dos archivos, el primero es tu servicio y el segundo notar\xe1s que se crea con el mismo nombre de tu servicio pero con la extensi\xf3n .spec al final, te dar\xe1s cuenta que lo \xfanico que quiere hacer este archivo es proveerte un esqueleto f\xe1cil y entendible en el que puedas empezar a escribir pruebas de la manera m\xe1s f\xe1cil posible."),Object(i.b)("p",null,'Empecemos por algunos fundamentos. Supongamos que decidiste crear un servicio llamado "names" porque ser\xe1 un servicio que retorne una lista de nombres. Para ello vas a guardar dichos nombres en una propiedad privada y vas crear un metodo get para devolver dichos nombres a un controlador u otro servicio. Ser\xeda algo as\xed:'),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"class Observable {\n    import { Injectable } from '@angular/core';\n\n    @Injectable({\n        providedIn: 'root'\n    })\n    export class NamesService {\n\n        private names: string[] = ['Juan', 'Mati'];\n\n        constructor() { }\n\n        public getNames() {\n            return this.names;\n        }\n    }\n}\n")),Object(i.b)("p",null,"Ahora bien, nuestra primera tentaci\xf3n ser\xe1 escribir en nuestra prueba unitaria algo como esto:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"    import { TestBed, inject } from '@angular/core/testing'; // We always need this\n    import { NamesService } from './names.service'; // Our service to test\n\n    describe('NamesService', () => {\n        beforeEach(() => {\n            TestBed.configureTestingModule({\n            providers: [NamesService] // Service to test\n            });\n        });\n\n        it('should be created', inject([NamesService], (service: NamesService) => {\n            expect(service).toBeTruthy(); // We hope the service has been inyected and defined\n        }));\n\n        it('should return all names', inject([NamesService], (service: NamesService) => {\n            expect(service.getNames()).toBe(service.names); // Not allowed\n            expect(service.getNames()[0]).toBe(service.names[0]); // Not allowed again\n            expect(service.getNames()[0]).toBe('Mati); // Ok, but Seriously\n        }));\n\n    });\n")),Object(i.b)("p",null,"Sin embargo, te dar\xe1s cuenta de desafortunadamente no puedes acceder a la propiedad names del servicio porque dicha propiedad es privada. Tu test deber\xeda estar fallando. Por eso te ver\xe1s tentado a comparar con los nombres directamente lo cual no resulta ser una buena idea si la cantidad de nombres es muy grande y si cambia constantemente. Por eso lo que tu podr\xedas hacer es omitir a typescript y acceder al objeto mediante la sintaxis de array (cosas que solo javascript nos permite). ",Object(i.b)("inlineCode",{parentName:"p"},'service["names"]')," miremos como quedar\xeda:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'import { TestBed, inject } from "@angular/core/testing"; // We always need this\nimport { NamesService } from "./names.service"; // Our service to test\n\ndescribe("NamesService", () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [NamesService], // Service to test\n    });\n  });\n\n  it("should be created", inject([NamesService], (service: NamesService) => {\n    expect(service).toBeTruthy(); // We hope the service has been inyected and defined\n  }));\n\n  it("should return all names", inject(\n    [NamesService],\n    (service: NamesService) => {\n      expect(service.getNames().length).toBe(service["names"].length); // OK\n      expect(service.getNames()[0]).toBe(service["names"][0]); // OK\n    }\n  ));\n});\n')),Object(i.b)("p",null,"Habr\xe1 muchas discusiones sobre si es correcto te\xf3ricamente probar las propiedades privadas o no, si es correcto aplicar esta sintax\xeds o si el test es limpio o no. Sin embargo esto no tiene una respuesta concreta. Depender\xe1 de la filosof\xeda del equipo y de la gu\xeda de estilo que tu equipo adopte. Personalmente y en mis equipos de trabajo me gusta tener una navaja suiza de opciones para diferentes casos y tipos de proyecto por lo cual puesde ver esta opci\xf3n como una herramienta m\xe1s dentro de tus habilidades de testing."),Object(i.b)("p",null,"Eso es todo, espero que este post te sea de utilidad, Si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gust\xf3 tambi\xe9n puedes compartir usando los links a las redes sociales en la parte de abajo."),Object(i.b)(d.a,{slug:"escribiendo-tests-para-funciones-y-propiedades-privadas-en-angular",mdxType:"Discuss"}))}p.isMDXComponent=!0},2535:function(e,a,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/escribiendo-tests-para-funciones-y-propiedades-privadas-en-angular",function(){return n("0Xln")}])},j53b:function(e,a,n){"use strict";var r=n("1OyB"),s=n("vuIU"),t=n("Ji7U"),o=n("md7G"),i=n("foSv"),c=n("MX0m"),u=n.n(c),d=n("q1tI"),l=n.n(d),p=(n("YFqc"),l.a.createElement);function b(e){var a=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Object(i.a)(e);if(a){var s=Object(i.a)(this).constructor;n=Reflect.construct(r,arguments,s)}else n=r.apply(this,arguments);return Object(o.a)(this,n)}}var m={CSS:"primary",HTML:"secondary",Javascript:"warning",Firebase:"warning","Google Maps":"darkgreen",Angular:"danger",React:"success","Desarrollo Web":"info","Google Datastudio":"primary","Big Query":"danger",NodeJS:"node",Other:"dark",Typescript:"typescript","Programaci\xf3n Reactiva":"reactive"},g=function(e){Object(t.a)(n,e);var a=b(n);function n(){return Object(r.a)(this,n),a.apply(this,arguments)}return Object(s.a)(n,[{key:"render",value:function(){var e=this.props.name;return p("a",{className:"jsx-187945056 "+("badge badge-"+(m[e]||"dark")||!1)},e,p(u.a,{id:"187945056"},[".badge.jsx-187945056{-webkit-text-decoration:none;text-decoration:none;margin-right:1em;color:white;padding:0.5em 0.5em;margin:0.5em 0;display:inline-block;}",".badge-primary.jsx-187945056{background-color:blue;}",".badge-secondary.jsx-187945056{background-color:green;}",".badge-darkgreen.jsx-187945056{background-color:#3cba54;}",".badge-danger.jsx-187945056{background-color:red;}",".badge-warning.jsx-187945056{background-color:#e5be01;}",".badge-info.jsx-187945056{background-color:gray;}",".badge-dark.jsx-187945056{background-color:black;}",".badge-success.jsx-187945056{background-color:green;}",".badge-node.jsx-187945056{background-color:#11d92f;}",".badge-typescript.jsx-187945056{background-color:#4f8cf6;}",".badge-reactive.jsx-187945056{background-color:#e10c8c;}"]))}}]),n}(l.a.Component),v=l.a.createElement;function f(e){var a=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Object(i.a)(e);if(a){var s=Object(i.a)(this).constructor;n=Reflect.construct(r,arguments,s)}else n=r.apply(this,arguments);return Object(o.a)(this,n)}}var j=function(e){Object(t.a)(n,e);var a=f(n);function n(){return Object(r.a)(this,n),a.apply(this,arguments)}return Object(s.a)(n,[{key:"render",value:function(){var e=this.props,a=e.date,n=e.tags;e.slug;return v("small",{className:"jsx-1750184873 "},v("span",{className:"jsx-1750184873"},v("strong",{className:"jsx-1750184873"},"Fecha: "),new Date(a).toLocaleDateString("es-CO")," -",v("strong",{className:"jsx-1750184873"}," Autor: ")," Sebastian Gomez"),v("span",{className:"jsx-1750184873"}),v("span",{className:"jsx-1750184873"},n.map((function(e,a){return v(g,{name:e,key:a})}))),v(u.a,{id:"1750184873"},["a.jsx-1750184873{color:#9eabb3;-webkit-text-decoration:none;text-decoration:none;}","small.jsx-1750184873{color:#9eabb3;}","span.jsx-1750184873{display:block;}","span.jsx-1750184873:first-child{margin-top:0.2em;}","span.jsx-1750184873:last-child{margin-bottom:1em;}"]))}}]),n}(l.a.Component);a.a=j}},[["2535",0,1,2,3,4,5]]]);