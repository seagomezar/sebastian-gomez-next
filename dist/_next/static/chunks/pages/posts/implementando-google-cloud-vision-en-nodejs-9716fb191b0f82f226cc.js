_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[30],{j53b:function(e,a,n){"use strict";var t=n("1OyB"),o=n("vuIU"),r=n("Ji7U"),s=n("md7G"),l=n("foSv"),c=n("MX0m"),i=n.n(c),u=n("q1tI"),p=n.n(u),d=(n("YFqc"),p.a.createElement);function b(e){var a=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,t=Object(l.a)(e);if(a){var o=Object(l.a)(this).constructor;n=Reflect.construct(t,arguments,o)}else n=t.apply(this,arguments);return Object(s.a)(this,n)}}var m={CSS:"primary",HTML:"secondary",Javascript:"warning",Firebase:"warning","Google Maps":"darkgreen",Angular:"danger",React:"success","Desarrollo Web":"info","Google Datastudio":"primary","Big Query":"danger",NodeJS:"node",Other:"dark",Typescript:"typescript","Programaci\xf3n Reactiva":"reactive"},g=function(e){Object(r.a)(n,e);var a=b(n);function n(){return Object(t.a)(this,n),a.apply(this,arguments)}return Object(o.a)(n,[{key:"render",value:function(){var e=this.props.name;return d("a",{className:"jsx-187945056 "+("badge badge-"+(m[e]||"dark")||!1)},e,d(i.a,{id:"187945056"},[".badge.jsx-187945056{-webkit-text-decoration:none;text-decoration:none;margin-right:1em;color:white;padding:0.5em 0.5em;margin:0.5em 0;display:inline-block;}",".badge-primary.jsx-187945056{background-color:blue;}",".badge-secondary.jsx-187945056{background-color:green;}",".badge-darkgreen.jsx-187945056{background-color:#3cba54;}",".badge-danger.jsx-187945056{background-color:red;}",".badge-warning.jsx-187945056{background-color:#e5be01;}",".badge-info.jsx-187945056{background-color:gray;}",".badge-dark.jsx-187945056{background-color:black;}",".badge-success.jsx-187945056{background-color:green;}",".badge-node.jsx-187945056{background-color:#11d92f;}",".badge-typescript.jsx-187945056{background-color:#4f8cf6;}",".badge-reactive.jsx-187945056{background-color:#e10c8c;}"]))}}]),n}(p.a.Component),j=p.a.createElement;function O(e){var a=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,t=Object(l.a)(e);if(a){var o=Object(l.a)(this).constructor;n=Reflect.construct(t,arguments,o)}else n=t.apply(this,arguments);return Object(s.a)(this,n)}}var f=function(e){Object(r.a)(n,e);var a=O(n);function n(){return Object(t.a)(this,n),a.apply(this,arguments)}return Object(o.a)(n,[{key:"render",value:function(){var e=this.props,a=e.date,n=e.tags;e.slug;return j("small",{className:"jsx-1750184873 "},j("span",{className:"jsx-1750184873"},j("strong",{className:"jsx-1750184873"},"Fecha: "),new Date(a).toLocaleDateString("es-CO")," -",j("strong",{className:"jsx-1750184873"}," Autor: ")," Sebastian Gomez"),j("span",{className:"jsx-1750184873"}),j("span",{className:"jsx-1750184873"},n.map((function(e,a){return j(g,{name:e,key:a})}))),j(i.a,{id:"1750184873"},["a.jsx-1750184873{color:#9eabb3;-webkit-text-decoration:none;text-decoration:none;}","small.jsx-1750184873{color:#9eabb3;}","span.jsx-1750184873{display:block;}","span.jsx-1750184873:first-child{margin-top:0.2em;}","span.jsx-1750184873:last-child{margin-bottom:1em;}"]))}}]),n}(p.a.Component);a.a=f},mMO4:function(e,a,n){"use strict";n.r(a),n.d(a,"default",(function(){return d}));var t=n("wx14"),o=n("Ff2n"),r=n("q1tI"),s=n.n(r),l=n("7ljp"),c=n("j53b"),i=n("6G3q"),u=n("37hk"),p=(s.a.createElement,{});function d(e){var a=e.components,n=Object(o.a)(e,["components"]);return Object(l.b)("wrapper",Object(t.a)({},p,n,{components:a,mdxType:"MDXLayout"}),Object(l.b)(i.a,{category:"javascript",date:"2020-05-05",title:"Implementando Google Cloud Vision en NodeJS",slug:"implementando-google-cloud-vision-en-nodejs",thumbnailImage:"/cloudvision.png",excerpt:"Siguiendo con la tem\xe1tica de la Cloud Visi\xf3n de Google en este post vamos a implementarla en NodeJS para detectar caracter\xedsticas sobre im\xe1genes. ",mdxType:"HeadSite"}),Object(l.b)("h1",null,"Implementando Google Cloud Vision en NodeJS"),Object(l.b)(c.a,{tags:["NodeJS","Desarrollo Web"],date:"2020-05-05",slug:"implementando-google-cloud-vision-en-nodejs",mdxType:"PostHeader"}),Object(l.b)("p",null,"Siguiendo con la tem\xe1tica de la Cloud Visi\xf3n de Google en este post vamos a implementarla en NodeJS para detectar caracter\xedsticas sobre im\xe1genes."),Object(l.b)("p",null,"Lo primero que necesitamos entender es que la SDK de la Vision Cloud de Google deber\xeda operar sobre un servidor, es all\xed donde surge la necesidad de usar NodeJS sin embargo si tienes alguna experiencia con NodeJS sabr\xe1s que en la mayor\xeda de los casos se requiere de una librer\xeda para procesar las peticiones HTTP Post, Get y Put. En este post usaremos ExpressJS ya que es la librer\xeda mas conocida para esta tarea.\xa0Si tienes dudas sobre las generalidades de la Cloud Vision de Google o la capa gratuita en este ",Object(l.b)("a",Object(t.a)({parentName:"p"},{href:"https://www.sebastian-gomez.com/introduccion-a-google-vision-api/"}),"post\xa0"),"puedes revisarlas."),Object(l.b)("p",null,"En primer lugar vamos a revisar las caracter\xedstica que nos ofrece la API de visi\xf3n de Google para implementar con NodeJs:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Detecci\xf3n de rostros"),Object(l.b)("li",{parentName:"ul"},"Atributos de las im\xe1genes."),Object(l.b)("li",{parentName:"ul"},"Anotaci\xf3n de etiquetas."),Object(l.b)("li",{parentName:"ul"},"Detecci\xf3n de contenido para adultos."),Object(l.b)("li",{parentName:"ul"},"Detecci\xf3n de logos."),Object(l.b)("li",{parentName:"ul"},"Encuadre de los elementos de la imagen."),Object(l.b)("li",{parentName:"ul"},"Reconocimiento \xf3ptico de caracteres.")),Object(l.b)("p",null,"Revisemos las responsabilidades que tendr\xeda cada uno de los componentes de la arquitectura anterior:"),Object(l.b)("p",null,"Client Browser:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Presentar informaci\xf3n."),Object(l.b)("li",{parentName:"ul"},"Tomar fotograf\xedas o videos."),Object(l.b)("li",{parentName:"ul"},"Preprocesar im\xe1genes."),Object(l.b)("li",{parentName:"ul"},"Enviar las im\xe1genes al servidor.")),Object(l.b)("p",null,"ExpressJS:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Filtrar las peticiones del cliente."),Object(l.b)("li",{parentName:"ul"},"Recibir las im\xe1genes y almacenarlas en el servidor."),Object(l.b)("li",{parentName:"ul"},"Enviar las respuestas al cliente.")),Object(l.b)("p",null,"Google Vision SDK ","*",":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Procesar las im\xe1genes."),Object(l.b)("li",{parentName:"ul"},"Operaciones matem\xe1ticas.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Detecci\xf3n de p\xedxeles."),Object(l.b)("li",{parentName:"ul"},"Filtros."),Object(l.b)("li",{parentName:"ul"},"Transformaciones."))),Object(l.b)("li",{parentName:"ul"},"Codificaci\xf3n de las im\xe1genes."),Object(l.b)("li",{parentName:"ul"},"Preparaci\xf3n de las peticiones.")),Object(l.b)("p",null,"Google Vision API:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Comparar las im\xe1genes contra el conjunto de im\xe1genes."),Object(l.b)("li",{parentName:"ul"},"Aplicar rutinas de machine learning con las im\xe1genes como entrada."),Object(l.b)("li",{parentName:"ul"},"Conectarse con otras tecnolog\xedas como Tensor Flow."),Object(l.b)("li",{parentName:"ul"},"Analizar los resultados y aumentar la base de conocimiento.")),Object(l.b)("p",null,"(","*",")\xa0Un\xa0SDK\xa0(Software Development Kit), o kit de desarrollo de software, es un conjunto de herramientas que ayudan a la programaci\xf3n de aplicaciones para un entorno tecnol\xf3gico particular."),Object(l.b)("p",null,"Antes de empezar necesitamos obtener una clave y las credenciales del proyecto para hacer uso de la API y la SDK, esto lo podemos conseguir directamente en la consola: ",Object(l.b)("a",Object(t.a)({parentName:"p"},{href:"https://cloud.google.com/"}),"https://cloud.google.com/"),"siguiendo estos simples pasos."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Crear el proyecto: ",Object(l.b)("a",Object(t.a)({parentName:"li"},{href:"https://console.cloud.google.com/projectcreate"}),"https://console.cloud.google.com/projectcreate")),Object(l.b)("li",{parentName:"ul"},"Acceder al proyecto."),Object(l.b)("li",{parentName:"ul"},"Seleccionar cuentas de servicio."),Object(l.b)("li",{parentName:"ul"},"Crear una cuenta de servicio \u2192 completar la informaci\xf3n."),Object(l.b)("li",{parentName:"ul"},"Seleccionamos suministrar una nueva clave privada en formato JSON."),Object(l.b)("li",{parentName:"ul"},"Guardamos el archivo JSON que se genera.")),Object(l.b)("p",null,"Manos a la obra con la implementaci\xf3n: en primer lugar creemos un proyecto en Node desde cero usando la l\xednea de comandos."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Crear un directorio: mkdir mi-directorio"),Object(l.b)("li",{parentName:"ul"},"Inicializar git: git init"),Object(l.b)("li",{parentName:"ul"},"Inicializar node: npm init"),Object(l.b)("li",{parentName:"ul"},"Instalar las dependencias:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"npm install @google-cloud/vision --save"),Object(l.b)("li",{parentName:"ul"},"npm install express --save"),Object(l.b)("li",{parentName:"ul"},"npm install multer --save"))),Object(l.b)("li",{parentName:"ul"},"Configurar nuestro comando npm start en el package.json para que inicie nuestro server:")),Object(l.b)("pre",null,Object(l.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'    ...\n    "scripts": {\n        "test":"echo\\\\"Error: no test specified\\\\"&& exit 1",\n        "start":"node server.js"\n    },\n    ...\n')),Object(l.b)("p",null,"Esto nos crear\xe1 la estructura base del proyecto y deber\xe1s a\xf1adir ademas algunos archivos. A continuaci\xf3n te muestro exactamente como deber\xeda lucir tu carpeta del proyecto y la explicaci\xf3n de cada item:"),Object(l.b)("p",null,"Como notar\xe1s los \xfanicos archivos sobre los cuales escribiremos c\xf3digo son server.js, index.html y app.js. Empecemos entonces con una funcionalidad b\xe1sica: \xbfComo tomar fotos con javascript?"),Object(l.b)("p",null,Object(l.b)("a",Object(t.a)({parentName:"p"},{href:"https://codepen.io/seagomezar/pen/QayorL"}),"https://codepen.io/seagomezar/pen/QayorL")),Object(l.b)("p",null,"Como ver\xe1s simplemente creando un stream y accediendo a los elementos del DOM es posible obtener la mas sencilla funcionalidad de tomar desde la c\xe1mara de tu ordenador las im\xe1genes y pintarlas dentro de la etiqueta img."),Object(l.b)("p",null,"Ahora veremos como subir la imagen que tomamos a nuestro servidor: En primer lugar desde nuestra aplicaci\xf3n una vez que tomamos la imagen y la pintamos dentro de la etiqueta SRC necesitamos hacer una petici\xf3n HTTP al servidor indic\xe1ndole que all\xed va la imagen. Para esto abre tu archivo app.js y a\xf1ade la funci\xf3n upload:"),Object(l.b)("pre",null,Object(l.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'function upload() {\n  const http = new XMLHttpRequest();\n  const url = "upload";\n  snap().then((blob) => {\n    http.open("POST", url, true);\n    http.setRequestHeader("X-Requested-With", "XMLHttpRequest");\n    http.onreadystatechange = (data) => {\n      //Call a function when the state changes.\n      if (http.readyState == 4 && http.status == 200) {\n        console.log(http.response);\n      }\n    };\n    const formData = new FormData();\n    formData.append("uploads", blob);\n    http.send(formData);\n  });\n}\n')),Object(l.b)("p",null,"Como ver\xe1s en esta funci\xf3n invocamos a la funci\xf3n snap() que definimos para capturar im\xe1genes desde nuestra c\xe1mara en el browser para enviar el contenido de la imagen mediante una XMLHttpRequest.\xa0 Luego necesitamos crear nuestro servidor para que sea capaz de recibir y procesar dicha imagen, es en este punto entonces donde necesitamos crear y configurar un servidor b\xe1sico con express que soporte la opci\xf3n de subir la imagen. Por tanto tu archivo server.js debe lucir de \xe9sta manera:"),Object(l.b)("pre",null,Object(l.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"    const express = require('express');\n    const app = express();\n    /* serves main page */\n    app.get(\"/\", function (req, res) {\n        res.sendfile('index.html')\n    });\n    /* serves all the static files */\n    app.get(/^(.+)$/, function (req, res) {\n        console.log('static file request : ' + req.params);\n        res.sendfile(__dirname + req.params\\[0\\]);\n    });\n    var port = process.env.PORT || 5000;\n    app.listen(port, function () {\n        console.log(\"Listening on \" + port);\n    });\n    // Setting up multer to upload images\n    const multer = require('multer');\n    const storage = multer.diskStorage({\n        destination: (req, file, cb) => {\n            cb(null, 'uploads/')\n        },\n        filename: (req, file, cb) => {\n            cb(null, Date.now() + '.jpg')//Appending.jpg\n        }\n    });\n    const upload = multer({ storage: storage });\n    app.post(\"/upload\", upload.single('uploads'), (req, res) => {\n        const currentFile = req.file.path;\n        console.log(\"Image path: \" + req.file.path);\n        res.send(\"Ok\");\n    });\n")),Object(l.b)("p",null,"En la primera parte de este archivo ver\xe1s la funcionalidad b\xe1sica que tiene un servidor de NodeJs usando express y sus respectivas configuraciones, sin profundizar mucho en esto nuestra funci\xf3n de inter\xe9s es la funci\xf3n upload la cual procesar\xe1 la imagen y la guardar\xe1 en la carpeta uploads. Ver\xe1s que \xa0esta funci\xf3n tambi\xe9n pondr\xe1 cada imagen en la carpeta de uploads con un numero consecutivo relacionado con el momento actual, esto lo hacemos para evitar duplicidades en las im\xe1genes."),Object(l.b)("p",null,"Hasta este momento solo hemos creado funciones utilitarias en el server.js para inicializar el server y para subir archivos. Pero no hemos realizado ning\xfan proceso sobre la imagen, ahora vamos a aprender como detectar caracter\xedsticas sobre la imagen usando la SDK de Cloud Vision API:"),Object(l.b)("pre",null,Object(l.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"    const vision = require('@google-cloud/vision')({\n        projectId: 'vision-poc-180601',\n        keyFilename: './cloud-credentials.json'\n    });\n\n    app.post(\"/labels\", upload.single('uploads'), function (req, res) {\n        const currentFile = req.file.path;\n        const request = {\n            source: {\n                filename: currentFile\n            }\n        };\n        vision.labelDetection(request)\n        .then((results) => {\n            const labels = results\\[0\\].labelAnnotations;\n            console.log('Labels:');\n            labels.forEach((label) => console.log(label.description));\n                res.send(labels);\n            })\n        .catch((err) => {\n            console.error('ERROR:', err);\n            res.send(\"BAD\");\n        });\n    });\n")),Object(l.b)("p",null,"Primero vamos a a\xf1adir las l\xedneas que inicializan nuestra configuraci\xf3n de la Cloud Vision de Google. Luego creamos con express un endpoint que se encarga de recibir una imagen y obtener todos los labels o etiquetas que se pueden obtener de dicha imagen. Y los retornaremos como respuesta de la petici\xf3n para presentarlos en el front-end."),Object(l.b)("p",null,"Finalmente podemos usar otra caracter\xedstica que nos permite hallar los rostros en una imagen con su respectiva traza y path de cada caracter\xedstica del rostro:"),Object(l.b)("pre",null,Object(l.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"    app.post(\"/faces\", upload.single('uploads'), (req, res) => {\n        const currentFile = req.file.path;\n        vision.faceDetection({ source: { filename: currentFile } })\n            .then((results) => {\n                const faces = results\\[0\\].faceAnnotations;\n                res.send(faces);\n            })\n            .catch((err) => {\n                console.error('ERROR:', err);\n                res.send(\"BAD\");\n            });\n    });\n")),Object(l.b)("p",null,"Una vez que tenemos nuestro archivo de servidor server.js completo, debemos modificar un poco nuestro index.html y app.js para mostrar nuestros hallazgos:"),Object(l.b)("pre",null,Object(l.b)("code",Object(t.a)({parentName:"pre"},{className:"language-html"}),'<!\u2014index.html\u2014>\n<button class="shutter" onclick="upload()">\n  Tomar y subir una foto\n</button>\n<button class="shutter" onclick="sendToLabelDetection()">\n  Analizar imagen\n</button>\n<button class="shutter" onclick="sendToFaceDetection()">\n  Detectar rostros y caracter\xedsticas\n</button>\n\n<div>\n  <h2>Caracter\xedsticas de la imagen</h2>\n  <div id="labels"></div>\n</div>\n')),Object(l.b)("p",null,"Poniendo todo lo anterior junto podr\xe1s ver las caracter\xedsticas(labels) de la imagen en una manera similar a esta en la detecci\xf3n de caracter\xedsticas:"),Object(l.b)("p",null,"Sin embargo para la detecci\xf3n y extracci\xf3n de rostros he implementado solo el login por consola donde podr\xe1s ver un elemento de un array por rostro detectado y dentro de cada rostro detectado las \u201clandmarks\u201d que delimitan exactamente cada uno de los elementos del rostro:"),Object(l.b)("p",null,"Puedes jugar con estas funciones para crear combinaciones de caracter\xedsticas \xfanicas para tu aplicaci\xf3n o producto. En este repositorio podr\xe1s jugar con este c\xf3digo \xa0y usarlo para la implementaci\xf3n de tus propias funcionalidades, tambi\xe9n encontrar\xe1s algunas otras funciones como por ejemplo detectar personas felices, o tristes e una foto:"),Object(l.b)("p",null,Object(l.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/seagomezar/devfest-vision"}),"https://github.com/seagomezar/devfest-vision")),Object(l.b)("p",null,"Para consultar m\xe1s informaci\xf3n sobre las operaciones de la SDK y la API de cloud vision para NodeJS puedes ver el siguiente repositorio:"),Object(l.b)("p",null,Object(l.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/googleapis/nodejs-vision/tree/master/samples"}),"https://github.com/googleapis/nodejs-vision/tree/master/samples")),Object(l.b)("p",null,"Eso es todo, espero que este post te sea de utilidad y lo puedas aplicar a alg\xfan proyecto que tengas en mente, d\xe9jame un comentario si lograste implementarlo, si quieres a\xf1adir alguna otra funcionalidad o si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gust\xf3 tambi\xe9n puedes compartir usando los links a las redes sociales en la parte de abajo."),Object(l.b)(u.a,{slug:"implementando-google-cloud-vision-en-nodejs",mdxType:"Discuss"}))}d.isMDXComponent=!0},vNV5:function(e,a,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/implementando-google-cloud-vision-en-nodejs",function(){return n("mMO4")}])}},[["vNV5",0,1,2,3,4,5]]]);