_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[29],{EasL:function(e,a,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/implementando-filter-como-operador-en-observables",function(){return n("LtAf")}])},LtAf:function(e,a,n){"use strict";n.r(a),n.d(a,"default",(function(){return d}));var r=n("wx14"),o=n("Ff2n"),t=n("q1tI"),s=n.n(t),c=n("7ljp"),l=n("j53b"),i=n("6G3q"),b=n("37hk"),u=(s.a.createElement,{});function d(e){var a=e.components,n=Object(o.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},u,n,{components:a,mdxType:"MDXLayout"}),Object(c.b)(i.a,{category:"Javascript",date:"2020-05-05",title:"Implementando filter como operador en Observables",slug:"implementando-filter-como-operador-en-observables",thumbnailImage:"/rxjs.png",excerpt:"En este post vamos a aumentar el n\xfamero de operadores que podemos implementar y usar dentro de un Observable a\xf1adiendo el operador map.",mdxType:"HeadSite"}),Object(c.b)("h1",null,"Implementando filter como operador en Observables"),Object(c.b)(l.a,{tags:["Javascript","Programaci\xf3n Reactiva","Desarrollo Web"],date:"2020-05-05",slug:"implementando-filter-como-operador-en-observables",mdxType:"PostHeader"}),Object(c.b)("p",null,"En este post vamos a aumentar el n\xfamero de operadores que podemos implementar y usar dentro de un Observable a\xf1adiendo el operador map."),Object(c.b)("p",null,"En el ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.sebastian-gomez.com/implementando-map-como-operador-en-observables/"}),"post anterior")," tuvimos un primer acercamiento a la implementaci\xf3n del operador map en observables, lo implementamos desde cero similarmente a como lo hace RX.js. En este post vamos a aumentar el n\xfamero de operadores que podemos implementar y usar dentro de un Observable a\xf1adiendo el operador map. Primero recordemos cual es la definici\xf3n m\xe1s pura de un Observable con una funci\xf3n generadora de observables a partir de eventos:"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"class Observable {\n  constructor(subscribe) {\n    this._subscribe = subscribe;\n  }\n  subscribe(observer) {\n    return this._subscribe(observer);\n  }\n  static fromEvent(domElement, eventName) {\n    return new Observable(function subscribe(observer) {\n      const handler = (ev) => {\n        observer.next(ev);\n      };\n      domElement.addEventListener(eventName, handler);\n      return {\n        unsubscribe() {\n          domElement.removeEventListener(eventName, handler);\n        },\n      };\n    });\n  }\n}\n")),Object(c.b)("p",null,"De esta manera tu puedes crear Observables que te devolver\xe1n informaci\xf3n del evento de la siguiente manera:"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'    const button = document.getElementById("button");\n    const clicks = Observable.fromEvent(button, "click");\n    const clicksSubscription = clicks.subscribe({\n      next(e) {\n        console.log("Click in the button\u201d, e); // \u201ce\u201d contiene toda la informaci\xf3n del evento\n      }\n    });\n\n    clicksSubscription.unsubscribe(); // De esta manera te puedes des-suscribir\n')),Object(c.b)("p",null,"Sin embargo es probable que necesitemos hacer m\xe1s operaciones sobre la cadena de datos, imag\xednate si quiz\xe1 requiramos solamente obtener s\xf3lo algunos datos del evento por ejemplo solo la posici\xf3n del Mouse. O imag\xednate si s\xf3lo queremos escuchar por los clicks que se hagan en la parte izquierda del bot\xf3n. Pues bien vamos a implementar dos funciones que quiz\xe1 ya conozcas porque se usan principalmente para el procesamiento de arrays. Vamos a implementar la funci\xf3n filter sobre Observables. Pero antes veamos un ejemplo sobre como es su funcionamiento sobre Arrays en javascript para luego traerlo a nuestra definici\xf3n de observables e implementarlo all\xed."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"[1, 2, 3, 4].filter((x) => x > 3);\n// retorna [4]\n")),Object(c.b)("p",null,"Como vez similarmente que map, filter recibe como par\xe1metro una funci\xf3n, solo que en este cas\xf3 es de validaci\xf3n es decir retorna \u201ctrue\u201d o \u201cfalse\u201d. Valiendose de esta funci\xf3n el operador filter retorna el elemento para el cual la funci\xf3n de validaci\xf3n es \u201ctrue\u201d. Revisemos como ser\xeda la implementaci\xf3n si sobre arrays para luego extenderla a Observables."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"    filter(validationFunction) {\n      const self = this;\n      return new Observable(function subscribe(observer) {\n        const subscription = self.subscribe({\n          next(v) {\n            if(validationFunction(v)) {\n              observer.next(v);\n            }\n          },\n          error (e) {\n            observer.error(e);\n          },\n          complete () {\n            observer.complete();\n          }\n        });\n        return subscription;\n      });\n    }\n")),Object(c.b)("p",null,"\xbfEs m\xe1s simple esta vez, no? En general los operadores sobre observables siguen la misma l\xf3gica. Todos (O al menos la mayor\xeda) deben retornar un nuevo observable y las operaciones o filtros sobre los valores se deben hacer sobre la funci\xf3n next. Finalmente veamos como usar el operador filter sobre observables para filtrar los clicks que se hacen sobre un bot\xf3n pero que cumplen el criterio de encontrarse sobre el lado izquierdo del mouse."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'const button = document.getElementById("button");\nconst clicks = Observable.fromEvent(button, "click");\nconst clicksSubscription = clicks\n  .filter((ev) => ev.offsetX < 40)\n  .map((ev) => ev.offsetX)\n  .subscribe({\n    next(offSetX) {\n      console.log("La posici\xf3n del mouse respecto a X " + offSetX); // Solo imprime si haces click a la izquerda de "Me"\n    },\n  });\n')),Object(c.b)("p",null,"Finalmente aqu\xed est\xe1 el ejemplo completo con la implementaci\xf3n de filter y map:"),Object(c.b)("p",null,Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"https://codepen.io/seagomezar/pen/WdVzxB"}),"https://codepen.io/seagomezar/pen/WdVzxB")),Object(c.b)("p",null,"Eso es todo, espero que este post te sea de utilidad y lo puedas aplicar a alg\xfan proyecto que tengas en mente y que simplemente te haya ayudado a entender la naturaleza de los operadores sobre observables. d\xe9jame un comentario si lograste implementarlo, si quieres a\xf1adir alguna otra funcionalidad o si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gust\xf3 tambi\xe9n puedes compartir usando los links a las redes sociales en la parte de abajo."),Object(c.b)(b.a,{slug:"implementando-filter-como-operador-en-observables",mdxType:"Discuss"}))}d.isMDXComponent=!0},j53b:function(e,a,n){"use strict";var r=n("1OyB"),o=n("vuIU"),t=n("Ji7U"),s=n("md7G"),c=n("foSv"),l=n("MX0m"),i=n.n(l),b=n("q1tI"),u=n.n(b),d=(n("YFqc"),u.a.createElement);function m(e){var a=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Object(c.a)(e);if(a){var o=Object(c.a)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Object(s.a)(this,n)}}var p={CSS:"primary",HTML:"secondary",Javascript:"warning",Firebase:"warning","Google Maps":"darkgreen",Angular:"danger",React:"success","Desarrollo Web":"info","Google Datastudio":"primary","Big Query":"danger",NodeJS:"node",Other:"dark",Typescript:"typescript","Programaci\xf3n Reactiva":"reactive"},f=function(e){Object(t.a)(n,e);var a=m(n);function n(){return Object(r.a)(this,n),a.apply(this,arguments)}return Object(o.a)(n,[{key:"render",value:function(){var e=this.props.name;return d("a",{className:"jsx-187945056 "+("badge badge-"+(p[e]||"dark")||!1)},e,d(i.a,{id:"187945056"},[".badge.jsx-187945056{-webkit-text-decoration:none;text-decoration:none;margin-right:1em;color:white;padding:0.5em 0.5em;margin:0.5em 0;display:inline-block;}",".badge-primary.jsx-187945056{background-color:blue;}",".badge-secondary.jsx-187945056{background-color:green;}",".badge-darkgreen.jsx-187945056{background-color:#3cba54;}",".badge-danger.jsx-187945056{background-color:red;}",".badge-warning.jsx-187945056{background-color:#e5be01;}",".badge-info.jsx-187945056{background-color:gray;}",".badge-dark.jsx-187945056{background-color:black;}",".badge-success.jsx-187945056{background-color:green;}",".badge-node.jsx-187945056{background-color:#11d92f;}",".badge-typescript.jsx-187945056{background-color:#4f8cf6;}",".badge-reactive.jsx-187945056{background-color:#e10c8c;}"]))}}]),n}(u.a.Component),v=u.a.createElement;function g(e){var a=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Object(c.a)(e);if(a){var o=Object(c.a)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Object(s.a)(this,n)}}var j=function(e){Object(t.a)(n,e);var a=g(n);function n(){return Object(r.a)(this,n),a.apply(this,arguments)}return Object(o.a)(n,[{key:"render",value:function(){var e=this.props,a=e.date,n=e.tags;e.slug;return v("small",{className:"jsx-1750184873 "},v("span",{className:"jsx-1750184873"},v("strong",{className:"jsx-1750184873"},"Fecha: "),new Date(a).toLocaleDateString("es-CO")," -",v("strong",{className:"jsx-1750184873"}," Autor: ")," Sebastian Gomez"),v("span",{className:"jsx-1750184873"}),v("span",{className:"jsx-1750184873"},n.map((function(e,a){return v(f,{name:e,key:a})}))),v(i.a,{id:"1750184873"},["a.jsx-1750184873{color:#9eabb3;-webkit-text-decoration:none;text-decoration:none;}","small.jsx-1750184873{color:#9eabb3;}","span.jsx-1750184873{display:block;}","span.jsx-1750184873:first-child{margin-top:0.2em;}","span.jsx-1750184873:last-child{margin-bottom:1em;}"]))}}]),n}(u.a.Component);a.a=j}},[["EasL",0,1,2,3,4,5]]]);