_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[33],{j53b:function(e,a,n){"use strict";var o=n("1OyB"),r=n("vuIU"),t=n("Ji7U"),s=n("md7G"),c=n("foSv"),l=n("MX0m"),i=n.n(l),b=n("q1tI"),u=n.n(b),d=(n("YFqc"),u.a.createElement);function m(e){var a=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=Object(c.a)(e);if(a){var r=Object(c.a)(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return Object(s.a)(this,n)}}var p={CSS:"primary",HTML:"secondary",Javascript:"warning",Firebase:"warning","Google Maps":"darkgreen",Angular:"danger",React:"success","Desarrollo Web":"info","Google Datastudio":"primary","Big Query":"danger",NodeJS:"node",Other:"dark",Typescript:"typescript","Programaci\xf3n Reactiva":"reactive"},v=function(e){Object(t.a)(n,e);var a=m(n);function n(){return Object(o.a)(this,n),a.apply(this,arguments)}return Object(r.a)(n,[{key:"render",value:function(){var e=this.props.name;return d("a",{className:"jsx-187945056 "+("badge badge-"+(p[e]||"dark")||!1)},e,d(i.a,{id:"187945056"},[".badge.jsx-187945056{-webkit-text-decoration:none;text-decoration:none;margin-right:1em;color:white;padding:0.5em 0.5em;margin:0.5em 0;display:inline-block;}",".badge-primary.jsx-187945056{background-color:blue;}",".badge-secondary.jsx-187945056{background-color:green;}",".badge-darkgreen.jsx-187945056{background-color:#3cba54;}",".badge-danger.jsx-187945056{background-color:red;}",".badge-warning.jsx-187945056{background-color:#e5be01;}",".badge-info.jsx-187945056{background-color:gray;}",".badge-dark.jsx-187945056{background-color:black;}",".badge-success.jsx-187945056{background-color:green;}",".badge-node.jsx-187945056{background-color:#11d92f;}",".badge-typescript.jsx-187945056{background-color:#4f8cf6;}",".badge-reactive.jsx-187945056{background-color:#e10c8c;}"]))}}]),n}(u.a.Component),f=u.a.createElement;function g(e){var a=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=Object(c.a)(e);if(a){var r=Object(c.a)(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return Object(s.a)(this,n)}}var j=function(e){Object(t.a)(n,e);var a=g(n);function n(){return Object(o.a)(this,n),a.apply(this,arguments)}return Object(r.a)(n,[{key:"render",value:function(){var e=this.props,a=e.date,n=e.tags;e.slug;return f("small",{className:"jsx-1750184873 "},f("span",{className:"jsx-1750184873"},f("strong",{className:"jsx-1750184873"},"Fecha: "),new Date(a).toLocaleDateString("es-CO")," -",f("strong",{className:"jsx-1750184873"}," Autor: ")," Sebastian Gomez"),f("span",{className:"jsx-1750184873"}),f("span",{className:"jsx-1750184873"},n.map((function(e,a){return f(v,{name:e,key:a})}))),f(i.a,{id:"1750184873"},["a.jsx-1750184873{color:#9eabb3;-webkit-text-decoration:none;text-decoration:none;}","small.jsx-1750184873{color:#9eabb3;}","span.jsx-1750184873{display:block;}","span.jsx-1750184873:first-child{margin-top:0.2em;}","span.jsx-1750184873:last-child{margin-bottom:1em;}"]))}}]),n}(u.a.Component);a.a=j},qPw3:function(e,a,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/implementando-of-como-operador-en-observables",function(){return n("sbF5")}])},sbF5:function(e,a,n){"use strict";n.r(a),n.d(a,"default",(function(){return u}));var o=n("wx14"),r=n("Ff2n"),t=n("q1tI"),s=n.n(t),c=n("7ljp"),l=n("j53b"),i=n("6G3q"),b=(n("37hk"),s.a.createElement,{});function u(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(o.a)({},b,n,{components:a,mdxType:"MDXLayout"}),Object(c.b)(i.a,{category:"Javascript",date:"2020-05-05",title:"Implementando of como operador en Observables",slug:"implementando-of-como-operador-en-observables",thumbnailImage:"/rxjs.png",excerpt:"En este post vamos a aumentar el n\xfamero de operadores que podemos implementar y usar dentro de un Observable creando el operador 'of' que b\xe1sicamente ser\xe1 un operador de generaci\xf3n de observables de manera que podamos convertir datos en observables.",mdxType:"HeadSite"}),Object(c.b)("h1",null,"Implementando of como operador en Observables"),Object(c.b)(l.a,{tags:["Javascript","Programaci\xf3n Reactiva","Desarrollo Web"],date:"2020-05-05",slug:"implementando-of-como-operador-en-observables",mdxType:"PostHeader"}),Object(c.b)("p",null,"En este post vamos a aumentar el n\xfamero de operadores que podemos implementar y usar dentro de un Observable creando el operador 'of' que b\xe1sicamente ser\xe1 un operador de generaci\xf3n de observables de manera que podamos convertir datos en observables."),Object(c.b)("p",null,"En los ",Object(c.b)("a",Object(o.a)({parentName:"p"},{href:"https://www.sebastian-gomez.com/implementando-filter-como-operador-en-observables/"}),"posts anteriores"),' tuvimos un acercamiento a la implementaci\xf3n del operador filter y el operador map en observables, lo implementamos desde cero similarmente a como lo hace RX.js para entender un poco m\xe1s la filosof\xeda y el funcionamiento interno. En este post vamos a aumentar el n\xfamero de operadores que podemos implementar y usar dentro de un Observable creando el operador \u201cof" que b\xe1sicamente ser\xe1 un operador de generaci\xf3n de observables de manera que podamos convertir datos en observables, veamos un ejemplo de lo que buscamos:'),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"const fancyObservable = Observable.of(5);\n\nconst fancySubscription = fancyObservable.subscribe({\n  next(e) {\n    console.log(e); // \u201ce\u201d\n  },\n});\n")),Object(c.b)("p",null,"En este caso te estar\xe1s preguntando, \xbfporqu\xe9 es esto importante? \xbfQue sentido tiene convertir una dato ya desenvuelto en un Observable? Bien, la respuesta m\xe1s inmediata es porque a veces necesitas combinar datos \u201cpuros\u201d con datos que provienen de Observables y m\xe1s adelante veremos maneras de combinar observables m\xe1s no tenemos manera de combinar datos \u201cpuros\u201d con observables sin primero llevar los datos a Observables."),Object(c.b)("p",null,"Antes de empezar la implementaci\xf3n recordemos cual es la definici\xf3n m\xe1s pura de un Observable con una funci\xf3n generadora de observables a partir de eventos:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"      class Observable {\n        constructor(subscribe) {\n          this._subscribe = subscribe;\n        }\n        subscribe(observer) {\n          return this._subscribe(observer);\n        }\n        static fromEvent(domElement, eventName) {\n          return new Observable(function subscribe(observer) {\n            const handler = ev => { observer.next(ev) };\n            domElement.addEventListener(eventName, handler);\n            return {\n              unsubscribe() {\n                domElement.removeEventListener(eventName, handler);\n              }\n            }\n          });\n        }\n      }\n    ```\n\nSimilarmente al operador fromEvent debemos crear el operador Of de manera est\xe1tica es decir que esta funci\xf3n va estar ligada al prototipo (prototype) sin importar si existe o no una instancia de un Observable. Diferente a lo que pasaba con las funciones filter y map que definitivamente solo se invocaban si ya ten\xedan un observable instancia.\n\n```js\n      static of(value) {\u2026}\n")),Object(c.b)("p",null,"Ahora revisando la definici\xf3n de frontEvent nos damos cuenta que solo esta retornando un valor a la vez cada ves que ocurre un nuevo evento, en nuestro caso para el operador \u201cof\u201d solo habr\xe1 un evento ya que hay un \xfanico dato e inmediatamente debemos completar el observable:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"observer.next(value);\nobserver.complete();\n")),Object(c.b)("p",null,"\xbfSuper f\xe1cil no?, ahora pongamos todo junto y tendremos la definici\xf3n completa de nuestro operador of:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'      static of(value) {\n    return new Observable(function subscribe(observer) {\n      observer.next(value);\n      observer.complete();\n      return {\n        unsubscribe() {}\n      };\n    });\n  }\n    ```\n\nFinalmente aqu\xed est\xe1 el ejemplo completo con la implementaci\xf3n de filter, map y nuestro nuevo operador of:\n\n[https://codepen.io/seagomezar/pen/rvZZev](https://codepen.io/seagomezar/pen/rvZZev?editors=0011)\n\nEso es todo, espero que este post te sea de utilidad y lo puedas aplicar a alg\xfan proyecto que tengas en mente y que simplemente te haya ayudado a entender la naturaleza de los operadores sobre observables. d\xe9jame un comentario si lograste implementarlo, si quieres a\xf1adir alguna otra funcionalidad o si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gust\xf3 tambi\xe9n puedes compartir usando los links a las redes sociales en la parte de abajo.\n\n<Discuss slug="implementando-of-como-operador-en-observables"/>\n')))}u.isMDXComponent=!0}},[["qPw3",0,1,2,3,4,5]]]);