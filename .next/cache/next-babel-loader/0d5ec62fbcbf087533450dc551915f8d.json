{"ast":null,"code":"var _jsxFileName = \"/Users/s.gomez/Desktop/sebastian-gomez/pages/posts/todo-sobre-transiciones-en-css.mdx\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport PostHeader from \"../../components/PostHeader\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", _extends({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }));\n};\n\nconst layoutProps = {};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }), mdx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, `Todo sobre transiciones en CSS`), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, `Las transiciones hacen parte del conjunto de herramientas que poseemos como desarrolladores FrontEnd para mejorar la experiencia del usuario dentro de nuestra aplicación Web. Son útiles porque nos permiten animar el cambio de valores en las distintas propiedades de un elemento lo que puede hacerlo más llamativo al usuario e invitarlo a interactuar con él. En este post trataré de cubrir el extenso tema de transiciones con diversos ejemplos adaptados desde la especificación.`), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, `Empecemos con un ejemplo simple:`), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, `Tenemos un cuadrado simple:`), mdx(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), `<div id=\"square1\" class=\"square red\"></div>\n`)), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, `Y unos estilos asociados a dicho cuadrado:`), mdx(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), `.square {\nwidth: 50px;\nheight: 50px;\nmargin-bottom: 5px;\n}\n.red { background: red; }\n`)), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, `Y tenemos una clase adicional que se la asignaremos al cuadrado en un momento x en el tiempo:`), mdx(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), `.black {\nbackground: black;\n}\n`)), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, `Sin embargo queremos que esto se haga de una manera suave, controlada y agradable al usuario. Por tanto es aquí donde necesitamos hacer uso de las transiciones. Esto lo podemos hacer añadiendo la propiedad transition dentro de la clase que queremos añadir:`), mdx(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), `.black {\nbackground: black;\ntransition: background 2s 0.25s;\n}\n`)), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, `La propiedad transition como la hemos usado en el ejemplo anterior nos permite que el cambio de background de rojo a negro se haga durante 2 segundos (duración) en vez de hacer el cambio instantáneamente, también nos permite indicar que este cambio empiece a ocurrir 0.25 segundos después de que asigne la clase al elemento (delay).\nTambién existe otra sintaxis alternativa para esto que requiere unas cuantas líneas más, sin embargo es útil conocerla:`), mdx(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), `.black {\nbackground: black;\ntransition-property: background;\ntransition-duration: 2s;\ntransition-delay: 0.25s;\n}\n`)), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, `Analogamente a los valores que hemos asignado en segundo a la duración y al retraso (delay) podríamos haberlo hecho en milisegundos, para lo cual bastaría con multiplicar por 1000 y añadir ms al final. Por ejemplo:`), mdx(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), `...\ntransition-duration: 2000ms;\ntransition-delay: 250ms;\n...\n`)), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, `Si queremos hacer transiciones sobre más de una propiedad, podemos usar all para indicar que la transición se aplica sobre todas las propiedades posibles:`), mdx(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), `.black {\nbackground: black;\ncolor: white;\ntransition: all 2s 0.25s;\n}\n`)), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, `Nota`), `: Transition all no es recomendable desde el punto de vista de desempeño (performance) altamente recomendamos no usar transition all a menos que definitivamente quieras aplicar transiciones sobre todo lo que pase con el elemento de la misma manera, por eso a continuación te explico como hacer transiciones específicamente con cada propiedad.`), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, `A veces no deseamos que se hagan transiciones sobre todas las propiedades de la misma manera, la propiedad transition además tiene la característica de permitir especificar la transición de cada propiedad simplemente separándolas por coma. Veamos un ejemplo:`), mdx(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), `.black {\nbackground: black;\ncolor: white;\ntransition: background 2s 0.25s,\ncolor 1.5 3s;\n}\n`)), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, `En el ejemplo anterior estamos cambiando el background y el color con distinta duración y distinto retraso (delay). Esto permite tener un control mas granular de exactamente lo que necesitamos animar en cada transición.`), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, `Como habrás notado hasta ahora las transiciones de las que hablamos ocurren de manera lineal, esto quiere decir que el cambio ocurre uniformemente durante el tiempo que dure la transición, sin embargo esta no es la única manera de hacerlo, por ejemplo podemos acelerar el cambio al comienzo y desacelerarlo al final lo que nos dará un tipo diferente de sensación al ver la transición. Para determinar como ocurrirá el cambio, tenemos la propiedad transition-timing-function que puede tomar los siguientes valores:`), mdx(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), `transition-timing-function: linear; // Este es el valor por defecto, no hace falta incluirlo\ntransition-timing-function: ease-in; // Significa que al comienzo sea rápido el cambio y que después se ralentice.\ntransition-timing-function: ease-out; // Significa que al comienzo sea lento el cambio y que después se acelere.\ntransition-timing-function: ease-in-out; // Significa que al comienzo y al final sea rápido el cambio pero en la mitad sea lento\ntransition-timing-function: cubic-bezier(0.21,0.3,0.1,0.23); // De acuerdo a los valores se acelera o desacelera en los distintos momentos en que ocurre la transición.\n`)), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, `Pero esta no es la única manera de añadir esta propiedad a las transiciones. También es posible hacerlo directamente en la propiedad transition:`), mdx(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), `.move {\ntransform: translateX(500px);\ntransition: transform 2s 0.25s ease-in-out;\n}\n`)), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, `Incluso en cada transición sobre las propiedades:`), mdx(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), `.move-background {\ntransform: translateX(500px);\nbackground: red;\ntransition: transform 2s 0.25s ease-in-out,\nbackground 1s 0.10 cubic-bezier(0.21,0.3,0.1,0.23);\n}\n`)), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, `Miremos en detalle un poco más como funciona la propiedad transition-timing-function cuando toma el valor de cubic-bezier(). Para ello revisemos en que consiste la ecuación de la curva de bezier en la cual se basa esta función.`), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, `Las curvas de bezier son un sistema matemático que desarrollo pierre bezier para el trazado de dibujos de aeronaves y automóviles que se describe como una ecuación que toma cuatro valores para describir la curva:`), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/23242B8E-A920-4955-84E1-C7D2563CD969.png\"\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }), mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"src\": \"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/23242B8E-A920-4955-84E1-C7D2563CD969.png\",\n    \"alt\": null\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }))), ` Con una ecuación matemática de la siguiente forma: `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/Screen-Shot-2018-01-09-at-4.13.37-PM.png\"\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }), mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"src\": \"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/Screen-Shot-2018-01-09-at-4.13.37-PM-1024x53.png\",\n    \"alt\": null\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })))), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, `Pues bien estos cuatro valores (P0 a P3) son los que describen la transición del movimiento entre el punto inicial y el punto final y con estos se pueden definir completamente diversos tipos de transiciones:`), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, `cubic-bezier(P0, P1, P2, P3); En estos sitios web puedes jugar más con este tipo de transiciones donde puedes ajustar los valores para tener un mayor control en tu transición:`), mdx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://cubic-bezier.com/\"\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), `http://cubic-bezier.com/`)), mdx(\"li\", {\n    parentName: \"ul\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://easings.net/\"\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }), `http://easings.net/`))), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, `Debes tener en cuenta que hay propiedades que no son “transicionables” esto quiere decir que no puedes aplicar transiciones a estas propiedades. Para ver una lista de cuales propiedades son “transicionables\" y cuales no puedes revisar este link:`), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties\"\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), `https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties`)), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, `En el siguiente ejemplo se muestra un conjunto de transiciones sobre cubos con distintas transition-timing-function y propiedades, puedes jugar con ellas para evidenciar sus diferencias:`), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codepen.io/seagomezar/pen/wPbYqe\"\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), `https://codepen.io/seagomezar/pen/wPbYqe`)), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, `Las herramientas para desarrolladores de los navegadores como chrome y firefox nos permiten ralentizar o acelerar las transformaciones para un mejor proceso de debug en ellas, para ello puedes abrir la pestaña animaciones:`), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/13B715EC-945A-47A7-A6E8-F6A79F24AE3D.png\"\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }), mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"src\": \"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/13B715EC-945A-47A7-A6E8-F6A79F24AE3D-1024x642.png\",\n    \"alt\": null\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  })))), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, `Puedes también usar Javascript para conocer el estado de una transición mediante los siguientes listeners:`), mdx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, `transitionstart`), mdx(\"li\", {\n    parentName: \"ul\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, `transitionend`)), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, `Finalmente algunas consideraciones respecto a las transiciones:`), mdx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, `Transiciones alrededor de 100ms son instantáneas para los usuarios y difícilmente perceptibles.`), mdx(\"li\", {\n    parentName: \"ul\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, `Transiciones de máximo 1 segundo y mínimo 250ms son buenas y mantiene a los usuario conectados.`), mdx(\"li\", {\n    parentName: \"ul\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, `Mas de 2 segundos es definitivamente una mala idea para transformaciones en sitios web estándar ya que puede desconectar al usuario de lo que pasa.`), mdx(\"li\", {\n    parentName: \"ul\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, `De 250ms a 300ms es el tiempo estándar de la mayoría de animaciones.`), mdx(\"li\", {\n    parentName: \"ul\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, `Las transiciones en general te permite crear experiencias que pasan solo una vez.`), mdx(\"li\", {\n    parentName: \"ul\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, `Si el navegador no soporta transiciones en el peor de los casos siempre se cambia la propiedad.`), mdx(\"li\", {\n    parentName: \"ul\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, `Las transiciones son granulares porque te permiten animar una o dos o x propiedades.`)), mdx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, `Eso es todo, espero que este post te sea de utilidad y lo puedas aplicar a algún proyecto que tengas en mente y que simplemente te haya ayudado a entender la naturaleza de las transiciones en CSS. Déjame un comentario si lograste implementarlo, si quieres añadir alguna otra funcionalidad o si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gustó también puedes compartir usando los links a las redes sociales en la parte de abajo.`));\n}\n;\nMDXContent.isMDXComponent = true;","map":{"version":3,"sources":["/Users/s.gomez/Desktop/sebastian-gomez/pages/posts/todo-sobre-transiciones-en-css.mdx"],"names":["React","mdx","PostHeader","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport PostHeader from \"../../components/PostHeader\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Todo sobre transiciones en CSS`}</h1>\n    <p>{`Las transiciones hacen parte del conjunto de herramientas que poseemos como desarrolladores FrontEnd para mejorar la experiencia del usuario dentro de nuestra aplicación Web. Son útiles porque nos permiten animar el cambio de valores en las distintas propiedades de un elemento lo que puede hacerlo más llamativo al usuario e invitarlo a interactuar con él. En este post trataré de cubrir el extenso tema de transiciones con diversos ejemplos adaptados desde la especificación.`}</p>\n    <p>{`Empecemos con un ejemplo simple:`}</p>\n    <p>{`Tenemos un cuadrado simple:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`<div id=\"square1\" class=\"square red\"></div>\n`}</code></pre>\n    <p>{`Y unos estilos asociados a dicho cuadrado:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.square {\nwidth: 50px;\nheight: 50px;\nmargin-bottom: 5px;\n}\n.red { background: red; }\n`}</code></pre>\n    <p>{`Y tenemos una clase adicional que se la asignaremos al cuadrado en un momento x en el tiempo:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.black {\nbackground: black;\n}\n`}</code></pre>\n    <p>{`Sin embargo queremos que esto se haga de una manera suave, controlada y agradable al usuario. Por tanto es aquí donde necesitamos hacer uso de las transiciones. Esto lo podemos hacer añadiendo la propiedad transition dentro de la clase que queremos añadir:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.black {\nbackground: black;\ntransition: background 2s 0.25s;\n}\n`}</code></pre>\n    <p>{`La propiedad transition como la hemos usado en el ejemplo anterior nos permite que el cambio de background de rojo a negro se haga durante 2 segundos (duración) en vez de hacer el cambio instantáneamente, también nos permite indicar que este cambio empiece a ocurrir 0.25 segundos después de que asigne la clase al elemento (delay).\nTambién existe otra sintaxis alternativa para esto que requiere unas cuantas líneas más, sin embargo es útil conocerla:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.black {\nbackground: black;\ntransition-property: background;\ntransition-duration: 2s;\ntransition-delay: 0.25s;\n}\n`}</code></pre>\n    <p>{`Analogamente a los valores que hemos asignado en segundo a la duración y al retraso (delay) podríamos haberlo hecho en milisegundos, para lo cual bastaría con multiplicar por 1000 y añadir ms al final. Por ejemplo:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`...\ntransition-duration: 2000ms;\ntransition-delay: 250ms;\n...\n`}</code></pre>\n    <p>{`Si queremos hacer transiciones sobre más de una propiedad, podemos usar all para indicar que la transición se aplica sobre todas las propiedades posibles:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.black {\nbackground: black;\ncolor: white;\ntransition: all 2s 0.25s;\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Nota`}</strong>{`: Transition all no es recomendable desde el punto de vista de desempeño (performance) altamente recomendamos no usar transition all a menos que definitivamente quieras aplicar transiciones sobre todo lo que pase con el elemento de la misma manera, por eso a continuación te explico como hacer transiciones específicamente con cada propiedad.`}</p>\n    <p>{`A veces no deseamos que se hagan transiciones sobre todas las propiedades de la misma manera, la propiedad transition además tiene la característica de permitir especificar la transición de cada propiedad simplemente separándolas por coma. Veamos un ejemplo:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.black {\nbackground: black;\ncolor: white;\ntransition: background 2s 0.25s,\ncolor 1.5 3s;\n}\n`}</code></pre>\n    <p>{`En el ejemplo anterior estamos cambiando el background y el color con distinta duración y distinto retraso (delay). Esto permite tener un control mas granular de exactamente lo que necesitamos animar en cada transición.`}</p>\n    <p>{`Como habrás notado hasta ahora las transiciones de las que hablamos ocurren de manera lineal, esto quiere decir que el cambio ocurre uniformemente durante el tiempo que dure la transición, sin embargo esta no es la única manera de hacerlo, por ejemplo podemos acelerar el cambio al comienzo y desacelerarlo al final lo que nos dará un tipo diferente de sensación al ver la transición. Para determinar como ocurrirá el cambio, tenemos la propiedad transition-timing-function que puede tomar los siguientes valores:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`transition-timing-function: linear; // Este es el valor por defecto, no hace falta incluirlo\ntransition-timing-function: ease-in; // Significa que al comienzo sea rápido el cambio y que después se ralentice.\ntransition-timing-function: ease-out; // Significa que al comienzo sea lento el cambio y que después se acelere.\ntransition-timing-function: ease-in-out; // Significa que al comienzo y al final sea rápido el cambio pero en la mitad sea lento\ntransition-timing-function: cubic-bezier(0.21,0.3,0.1,0.23); // De acuerdo a los valores se acelera o desacelera en los distintos momentos en que ocurre la transición.\n`}</code></pre>\n    <p>{`Pero esta no es la única manera de añadir esta propiedad a las transiciones. También es posible hacerlo directamente en la propiedad transition:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.move {\ntransform: translateX(500px);\ntransition: transform 2s 0.25s ease-in-out;\n}\n`}</code></pre>\n    <p>{`Incluso en cada transición sobre las propiedades:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.move-background {\ntransform: translateX(500px);\nbackground: red;\ntransition: transform 2s 0.25s ease-in-out,\nbackground 1s 0.10 cubic-bezier(0.21,0.3,0.1,0.23);\n}\n`}</code></pre>\n    <p>{`Miremos en detalle un poco más como funciona la propiedad transition-timing-function cuando toma el valor de cubic-bezier(). Para ello revisemos en que consiste la ecuación de la curva de bezier en la cual se basa esta función.`}</p>\n    <p>{`Las curvas de bezier son un sistema matemático que desarrollo pierre bezier para el trazado de dibujos de aeronaves y automóviles que se describe como una ecuación que toma cuatro valores para describir la curva:`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/23242B8E-A920-4955-84E1-C7D2563CD969.png\"\n      }}><img parentName=\"a\" {...{\n          \"src\": \"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/23242B8E-A920-4955-84E1-C7D2563CD969.png\",\n          \"alt\": null\n        }}></img></a>{` Con una ecuación matemática de la siguiente forma: `}<a parentName=\"p\" {...{\n        \"href\": \"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/Screen-Shot-2018-01-09-at-4.13.37-PM.png\"\n      }}><img parentName=\"a\" {...{\n          \"src\": \"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/Screen-Shot-2018-01-09-at-4.13.37-PM-1024x53.png\",\n          \"alt\": null\n        }}></img></a></p>\n    <p>{`Pues bien estos cuatro valores (P0 a P3) son los que describen la transición del movimiento entre el punto inicial y el punto final y con estos se pueden definir completamente diversos tipos de transiciones:`}</p>\n    <p>{`cubic-bezier(P0, P1, P2, P3); En estos sitios web puedes jugar más con este tipo de transiciones donde puedes ajustar los valores para tener un mayor control en tu transición:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://cubic-bezier.com/\"\n        }}>{`http://cubic-bezier.com/`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://easings.net/\"\n        }}>{`http://easings.net/`}</a></li>\n    </ul>\n    <p>{`Debes tener en cuenta que hay propiedades que no son “transicionables” esto quiere decir que no puedes aplicar transiciones a estas propiedades. Para ver una lista de cuales propiedades son “transicionables\" y cuales no puedes revisar este link:`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties\"\n      }}>{`https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties`}</a></p>\n    <p>{`En el siguiente ejemplo se muestra un conjunto de transiciones sobre cubos con distintas transition-timing-function y propiedades, puedes jugar con ellas para evidenciar sus diferencias:`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://codepen.io/seagomezar/pen/wPbYqe\"\n      }}>{`https://codepen.io/seagomezar/pen/wPbYqe`}</a></p>\n    <p>{`Las herramientas para desarrolladores de los navegadores como chrome y firefox nos permiten ralentizar o acelerar las transformaciones para un mejor proceso de debug en ellas, para ello puedes abrir la pestaña animaciones:`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/13B715EC-945A-47A7-A6E8-F6A79F24AE3D.png\"\n      }}><img parentName=\"a\" {...{\n          \"src\": \"https://storage.googleapis.com/sebastian-gomez-blog.appspot.com/uploads/2018/01/13B715EC-945A-47A7-A6E8-F6A79F24AE3D-1024x642.png\",\n          \"alt\": null\n        }}></img></a></p>\n    <p>{`Puedes también usar Javascript para conocer el estado de una transición mediante los siguientes listeners:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`transitionstart`}</li>\n      <li parentName=\"ul\">{`transitionend`}</li>\n    </ul>\n    <p>{`Finalmente algunas consideraciones respecto a las transiciones:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Transiciones alrededor de 100ms son instantáneas para los usuarios y difícilmente perceptibles.`}</li>\n      <li parentName=\"ul\">{`Transiciones de máximo 1 segundo y mínimo 250ms son buenas y mantiene a los usuario conectados.`}</li>\n      <li parentName=\"ul\">{`Mas de 2 segundos es definitivamente una mala idea para transformaciones en sitios web estándar ya que puede desconectar al usuario de lo que pasa.`}</li>\n      <li parentName=\"ul\">{`De 250ms a 300ms es el tiempo estándar de la mayoría de animaciones.`}</li>\n      <li parentName=\"ul\">{`Las transiciones en general te permite crear experiencias que pasan solo una vez.`}</li>\n      <li parentName=\"ul\">{`Si el navegador no soporta transiciones en el peor de los casos siempre se cambia la propiedad.`}</li>\n      <li parentName=\"ul\">{`Las transiciones son granulares porque te permiten animar una o dos o x propiedades.`}</li>\n    </ul>\n    <p>{`Eso es todo, espero que este post te sea de utilidad y lo puedas aplicar a algún proyecto que tengas en mente y que simplemente te haya ayudado a entender la naturaleza de las transiciones en CSS. Déjame un comentario si lograste implementarlo, si quieres añadir alguna otra funcionalidad o si tienes alguna duda no dudes en dejarme un comentario en la parte de abajo, recuerda que si te gustó también puedes compartir usando los links a las redes sociales en la parte de abajo.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}