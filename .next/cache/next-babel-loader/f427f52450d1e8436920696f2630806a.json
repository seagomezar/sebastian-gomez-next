{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint react/jsx-key: 0 */\nimport React from \"react\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport { LiveProvider, LiveEditor, LiveError, LivePreview } from \"react-live\";\nimport { mdx } from \"@mdx-js/react\";\nexport default (function (_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      live = _ref.live,\n      render = _ref.render;\n  var language = className.replace(/language-/, \"\");\n\n  if (live) {\n    return __jsx(\"div\", {\n      style: {\n        marginTop: \"40px\",\n        backgroundColor: \"black\"\n      }\n    }, __jsx(LiveProvider, {\n      code: children.trim(),\n      transformCode: function transformCode(code) {\n        return \"/** @jsx mdx */\" + code;\n      },\n      scope: {\n        mdx: mdx\n      }\n    }, __jsx(LivePreview, null), __jsx(LiveEditor, null), __jsx(LiveError, null)));\n  }\n\n  if (render) {\n    return __jsx(\"div\", {\n      style: {\n        marginTop: \"40px\"\n      }\n    }, __jsx(LiveProvider, {\n      code: children\n    }, __jsx(LivePreview, null)));\n  }\n\n  return __jsx(Highlight, _extends({}, defaultProps, {\n    code: children.trim(),\n    language: language\n  }), function (_ref2) {\n    var className = _ref2.className,\n        style = _ref2.style,\n        tokens = _ref2.tokens,\n        getLineProps = _ref2.getLineProps,\n        getTokenProps = _ref2.getTokenProps;\n    return __jsx(\"pre\", {\n      className: className,\n      style: _objectSpread({}, style, {\n        padding: \"20px\"\n      })\n    }, tokens.map(function (line, i) {\n      return __jsx(\"div\", _extends({\n        key: i\n      }, getLineProps({\n        line: line,\n        key: i\n      })), line.map(function (token, key) {\n        return __jsx(\"span\", _extends({\n          key: key\n        }, getTokenProps({\n          token: token,\n          key: key\n        })));\n      }));\n    }));\n  });\n});","map":null,"metadata":{},"sourceType":"module"}