{"ast":null,"code":"var _jsxFileName = \"/Users/s.gomez/Desktop/sebastian-gomez/components/CodeBlock.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint react/jsx-key: 0 */\nimport React from \"react\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport { LiveProvider, LiveEditor, LiveError, LivePreview } from \"react-live\";\nimport { mdx } from \"@mdx-js/react\";\nexport default (({\n  children,\n  className,\n  live,\n  render\n}) => {\n  const language = className.replace(/language-/, \"\");\n\n  if (live) {\n    return __jsx(\"div\", {\n      style: {\n        marginTop: \"40px\",\n        backgroundColor: \"black\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, __jsx(LiveProvider, {\n      code: children.trim(),\n      transformCode: code => \"/** @jsx mdx */\" + code,\n      scope: {\n        mdx\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, __jsx(LivePreview, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }), __jsx(LiveEditor, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }), __jsx(LiveError, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    })));\n  }\n\n  if (render) {\n    return __jsx(\"div\", {\n      style: {\n        marginTop: \"40px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, __jsx(LiveProvider, {\n      code: children,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, __jsx(LivePreview, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    })));\n  }\n\n  return __jsx(Highlight, _extends({}, defaultProps, {\n    code: children.trim(),\n    language: language,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), ({\n    className,\n    style,\n    tokens,\n    getLineProps,\n    getTokenProps\n  }) => __jsx(\"pre\", {\n    className: className,\n    style: _objectSpread({}, style, {\n      padding: \"20px\"\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, tokens.map((line, i) => __jsx(\"div\", _extends({\n    key: i\n  }, getLineProps({\n    line,\n    key: i\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), line.map((token, key) => __jsx(\"span\", _extends({\n    key: key\n  }, getTokenProps({\n    token,\n    key\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  })))))));\n});","map":{"version":3,"sources":["/Users/s.gomez/Desktop/sebastian-gomez/components/CodeBlock.js"],"names":["React","Highlight","defaultProps","LiveProvider","LiveEditor","LiveError","LivePreview","mdx","children","className","live","render","language","replace","marginTop","backgroundColor","trim","code","style","tokens","getLineProps","getTokenProps","padding","map","line","i","key","token"],"mappings":";;;;;;;;;;;AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,IAAoBC,YAApB,QAAwC,sBAAxC;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,SAAnC,EAA8CC,WAA9C,QAAiE,YAAjE;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA,gBAAe,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,SAAZ;AAAuBC,EAAAA,IAAvB;AAA6BC,EAAAA;AAA7B,CAAD,KAA2C;AACxD,QAAMC,QAAQ,GAAGH,SAAS,CAACI,OAAV,CAAkB,WAAlB,EAA+B,EAA/B,CAAjB;;AAEA,MAAIH,IAAJ,EAAU;AACR,WACE;AAAK,MAAA,KAAK,EAAE;AAAEI,QAAAA,SAAS,EAAE,MAAb;AAAqBC,QAAAA,eAAe,EAAE;AAAtC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,YAAD;AACE,MAAA,IAAI,EAAEP,QAAQ,CAACQ,IAAT,EADR;AAEE,MAAA,aAAa,EAAEC,IAAI,IAAI,oBAAoBA,IAF7C;AAGE,MAAA,KAAK,EAAE;AAAEV,QAAAA;AAAF,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAME,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAOE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CADF,CADF;AAaD;;AAED,MAAII,MAAJ,EAAY;AACV,WACE;AAAK,MAAA,KAAK,EAAE;AAAEG,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,YAAD;AAAc,MAAA,IAAI,EAAEN,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF;AAOD;;AAED,SACE,MAAC,SAAD,eAAeN,YAAf;AAA6B,IAAA,IAAI,EAAEM,QAAQ,CAACQ,IAAT,EAAnC;AAAoD,IAAA,QAAQ,EAAEJ,QAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACG,CAAC;AAAEH,IAAAA,SAAF;AAAaS,IAAAA,KAAb;AAAoBC,IAAAA,MAApB;AAA4BC,IAAAA,YAA5B;AAA0CC,IAAAA;AAA1C,GAAD,KACC;AAAK,IAAA,SAAS,EAAEZ,SAAhB;AAA2B,IAAA,KAAK,oBAAOS,KAAP;AAAcI,MAAAA,OAAO,EAAE;AAAvB,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,MAAM,CAACI,GAAP,CAAW,CAACC,IAAD,EAAOC,CAAP,KACV;AAAK,IAAA,GAAG,EAAEA;AAAV,KAAiBL,YAAY,CAAC;AAAEI,IAAAA,IAAF;AAAQE,IAAAA,GAAG,EAAED;AAAb,GAAD,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGD,IAAI,CAACD,GAAL,CAAS,CAACI,KAAD,EAAQD,GAAR,KACR;AAAM,IAAA,GAAG,EAAEA;AAAX,KAAoBL,aAAa,CAAC;AAAEM,IAAAA,KAAF;AAASD,IAAAA;AAAT,GAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,CADH,CADD,CADH,CAFJ,CADF;AAeD,CA5CD","sourcesContent":["/* eslint react/jsx-key: 0 */\n\nimport React from \"react\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport { LiveProvider, LiveEditor, LiveError, LivePreview } from \"react-live\";\nimport { mdx } from \"@mdx-js/react\";\n\nexport default ({ children, className, live, render }) => {\n  const language = className.replace(/language-/, \"\");\n\n  if (live) {\n    return (\n      <div style={{ marginTop: \"40px\", backgroundColor: \"black\" }}>\n        <LiveProvider\n          code={children.trim()}\n          transformCode={code => \"/** @jsx mdx */\" + code}\n          scope={{ mdx }}\n        >\n          <LivePreview />\n          <LiveEditor />\n          <LiveError />\n        </LiveProvider>\n      </div>\n    );\n  }\n\n  if (render) {\n    return (\n      <div style={{ marginTop: \"40px\" }}>\n        <LiveProvider code={children}>\n          <LivePreview />\n        </LiveProvider>\n      </div>\n    );\n  }\n\n  return (\n    <Highlight {...defaultProps} code={children.trim()} language={language}>\n      {({ className, style, tokens, getLineProps, getTokenProps }) => (\n        <pre className={className} style={{ ...style, padding: \"20px\" }}>\n          {tokens.map((line, i) => (\n            <div key={i} {...getLineProps({ line, key: i })}>\n              {line.map((token, key) => (\n                <span key={key} {...getTokenProps({ token, key })} />\n              ))}\n            </div>\n          ))}\n        </pre>\n      )}\n    </Highlight>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}