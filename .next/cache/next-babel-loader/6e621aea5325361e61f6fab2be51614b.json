{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint react/jsx-key: 0 */\nimport React from \"react\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport { LiveProvider, LiveEditor, LiveError, LivePreview } from \"react-live\";\nimport { mdx } from \"@mdx-js/react\";\nexport default (({\n  children,\n  className,\n  live,\n  render\n}) => {\n  const language = className.replace(/language-/, \"\");\n\n  if (live) {\n    return __jsx(\"div\", {\n      style: {\n        marginTop: \"40px\",\n        backgroundColor: \"black\"\n      }\n    }, __jsx(LiveProvider, {\n      code: children.trim(),\n      transformCode: code => \"/** @jsx mdx */\" + code,\n      scope: {\n        mdx\n      }\n    }, __jsx(LivePreview, null), __jsx(LiveEditor, null), __jsx(LiveError, null)));\n  }\n\n  if (render) {\n    return __jsx(\"div\", {\n      style: {\n        marginTop: \"40px\"\n      }\n    }, __jsx(LiveProvider, {\n      code: children\n    }, __jsx(LivePreview, null)));\n  }\n\n  return __jsx(Highlight, _extends({}, defaultProps, {\n    code: children.trim(),\n    language: language\n  }), ({\n    className,\n    style,\n    tokens,\n    getLineProps,\n    getTokenProps\n  }) => __jsx(\"pre\", {\n    className: className,\n    style: _objectSpread({}, style, {\n      padding: \"20px\"\n    })\n  }, tokens.map((line, i) => __jsx(\"div\", _extends({\n    key: i\n  }, getLineProps({\n    line,\n    key: i\n  })), line.map((token, key) => __jsx(\"span\", _extends({\n    key: key\n  }, getTokenProps({\n    token,\n    key\n  }))))))));\n});","map":null,"metadata":{},"sourceType":"module"}